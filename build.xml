<project default="all">
  <target name="all" depends="configuration, prepare, Build"/>

  <target name="configuration">
    <property name="TOOLS_URL" value="http://downloads.sourceforge.net/project/tortoisesvn/build%20tools/Tools-1.8.0.zip"/>
  
    <!-- Files which indicate the presence of an additional package -->
    <property name="TOOLS_PRESENCE_FILE" value="${path::combine(TortoiseSvnVersion, 'Tools/ver-1.8.0')}"/>
  </target>

  <target name="prepare" depends="configuration">
    <!-- Download Tortoise SVN sources -->
    <if test="${not directory::exists(path::combine(TortoiseSvnVersion, 'src'))}">
      <exec program="svn.exe">
        <arg value="checkout"/>
        <arg value="http://svn.osdn.net/svnroot/tortoisesvn/tags/${TortoiseSvnVersion}"/>
        <arg value="${TortoiseSvnVersion}"/>
      </exec>
    </if>

    <!-- Create Visual Studio project for building the JavaHL libraries -->
    <property name="svnjavahl_directory" value="${TortoiseSvnVersion}/svnjavahl"/>
    <if test="${not directory::exists(svnjavahl_directory)}">
      <mkdir dir="${svnjavahl_directory}"/>
      <copy todir="${svnjavahl_directory}">
        <fileset basedir="svnjavahl">
          <include name="*"/>
          <exclude name="Readme.txt"/>
      </fileset>
      </copy>
    </if>

    <if test="${not file::exists(TOOLS_PRESENCE_FILE)}">
      <get src="${TOOLS_URL}" dest="${TortoiseSvnVersion}/${path::get-file-name(TOOLS_URL)}"/>
      <unzip zipfile="${TortoiseSvnVersion}/${path::get-file-name(TOOLS_URL)}" todir="${TortoiseSvnVersion}"/>
      <!-- Create file for tools, it will be checked by the Tortoise SVN build script -->
    <touch file="${TOOLS_PRESENCE_FILE}" if="${not file::exists(TOOLS_PRESENCE_FILE)}"/>
    </if>

    <copy file="${TortoiseSvnVersion}/default.build.user.tmpl" tofile="${TortoiseSvnVersion}/default.build.user"/>
    <nant buildfile="${TortoiseSvnVersion}/default.build" target="init"/>
  </target>

  <target name="Patches">
    <!-- Nothing to do in this version -->
  </target>

  <target name="JNI_Headers" depends="Patches" description="Build JNI headers for JavaHL DLLs">
    <property name="JavaHL_Directory" value="${TortoiseSvnVersion}/ext/Subversion/subversion/bindings/javahl"/>
    <property name="JavaHL_SourceFileList" value="${JavaHL_Directory}/sources.txt"/>
    <delete file="${JavaHL_SourceFileList}" if="${file::exists(JavaHL_SourceFileList)}"/>
    <foreach item="File" property="JavaHL_File">
      <in>
      <items basedir="${JavaHL_Directory}">
        <include name="src/**/*.java"/>
      </items>
      </in>
      <do>
        <echo message="${JavaHL_File}${environment::newline()}" file="${JavaHL_SourceFileList}" append="true"/>
      </do>
    </foreach>
    <exec program="${JdkDirectory}/bin/javac.exe" workingdir="${JavaHL_Directory}">
        <arg value="@${path::get-file-name(JavaHL_SourceFileList)}"/>
        <arg line="-h include"/>
      </exec>
  </target>

  <target name="Build" description="Build Tortoise SVN, Subversion and its JavaHl library" depends="JNI_Headers, prepare">
    <!-- Build of Tortoise SVN and Subversion -->
    <property name="AdditionalTarget" value="" if="${arch == 'x86'}"/>
    <property name="AdditionalTarget" value="${arch}" if="${arch != 'x86'}"/>
    <nant buildfile="${TortoiseSvnVersion}/default.build" target="cleanall ${AdditionalTarget} binaries"/>

    <!-- Build of JavaHL library -->
    <exec program="msbuild.exe">
      <environment>
        <variable name="JavaDevelopmentKitBase" value="${JdkDirectory}"/>
      </environment>
      <arg value="${svnjavahl_directory}/svnjavahl.sln"/>
      <arg value="/p:Configuration=Release"/>
      <arg value="/p:Platform=${arch}"/>
      <arg value="/t:Rebuild"/>
    </exec>
  </target>
</project>