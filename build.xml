<project default="all">
  <target name="all" depends="configuration, prepare, Build"/>
  
  <target name="configuration">
    <!-- Tortoise SVN version (must equal a tag name from http://svn.osdn.net/svnroot/tortoisesvn/tags/) -->
    <property name="TortoiseSvnVersion" value="version-1.11.0"/>
    <property name="JdkDirectory" value="C:\Program Files\Java\jdk-11.0.1"/>

    <if test="${TortoiseSvnVersion == 'version-1.9.7' or TortoiseSvnVersion == 'version-1.10.1' or TortoiseSvnVersion == 'version-1.10.2' or TortoiseSvnVersion == 'version-1.11.0'}">
      <!-- URLs for downloading additional packages -->
      <property name="TOOLS_URL" value="http://downloads.sourceforge.net/project/tortoisesvn/build%20tools/Tools-1.8.0.zip"/>
    
      <!-- Files which indicate the presence of an additional package -->
      <property name="TOOLS_PRESENCE_FILE" value="${path::combine(TortoiseSvnVersion, 'Tools/ver-1.8.0')}"/>
    </if>
  </target>

  <target name="prepare" depends="configuration">
    <!-- Download Tortoise SVN sources -->
    <if test="${not directory::exists(TortoiseSvnVersion)}">
      <exec program="svn.exe">
        <arg value="checkout"/>
        <arg value="http://svn.osdn.net/svnroot/tortoisesvn/tags/${TortoiseSvnVersion}"/>
        <arg value="${TortoiseSvnVersion}"/>
      </exec>
    </if>

    <if test="${not file::exists(TOOLS_PRESENCE_FILE)}">
      <get src="${TOOLS_URL}" dest="${TortoiseSvnVersion}/${path::get-file-name(TOOLS_URL)}"/>
      <unzip zipfile="${TortoiseSvnVersion}/${path::get-file-name(TOOLS_URL)}" todir="${TortoiseSvnVersion}"/>    
      <!-- Create file for tools, it will be checked by the Tortoise SVN build script -->
    <touch file="${TOOLS_PRESENCE_FILE}" if="${not file::exists(TOOLS_PRESENCE_FILE)}"/>
    </if>

    <copy file="${TortoiseSvnVersion}/default.build.user.tmpl" tofile="${TortoiseSvnVersion}/default.build.user"/>
    <nant buildfile="${TortoiseSvnVersion}/default.build" target="init"/>
  </target>
  
  <target name="Patches">
    <if test="${TortoiseSvnVersion == 'version-1.10.1' or TortoiseSvnVersion == 'version-1.10.2'}">
      <exec program="svn.exe">
        <arg value="patch"/>
        <arg value="Patches/version-1.10.2_CommitItemStateFlags.java.patch"/>
        <arg value="${TortoiseSvnVersion}/ext/Subversion/subversion/bindings/javahl/src/org/apache/subversion/javahl"/>
      </exec>
      <exec program="svn.exe">
        <arg value="patch"/>
        <arg value="Patches/version-1.10.2_UserPasswordCallback.java.patch"/>
        <arg value="${TortoiseSvnVersion}/ext/Subversion/subversion/bindings/javahl/src/org/apache/subversion/javahl/callback"/>
      </exec>
      <exec program="svn.exe">
        <arg value="patch"/>
        <arg value="Patches/version-1.10.2_Revision.java.patch"/>
        <arg value="${TortoiseSvnVersion}/ext/Subversion/subversion/bindings/javahl/src/org/apache/subversion/javahl/types"/>
      </exec>
    </if>
  </target>
  
  <target name="JNI_Headers" depends="Patches" description="Build JNI headers for JavaHL DLLs">
    <property name="JavaHL_Directory" value="${TortoiseSvnVersion}/ext/Subversion/subversion/bindings/javahl"/>
    <property name="JavaHL_SourceFileList" value="${JavaHL_Directory}/sources.txt"/>
    <delete file="${JavaHL_SourceFileList}" if="${file::exists(JavaHL_SourceFileList)}"/>
    <foreach item="File" property="JavaHL_File">
      <in>
      <items basedir="${JavaHL_Directory}">
        <include name="src/**/*.java"/>
      </items>
      </in>
      <do>
        <echo message="${JavaHL_File}${environment::newline()}" file="${JavaHL_SourceFileList}" append="true"/>
      </do>
    </foreach>
    <exec program="${JdkDirectory}/bin/javac.exe" workingdir="${JavaHL_Directory}">
        <arg value="@${path::get-file-name(JavaHL_SourceFileList)}"/>
        <arg line="-h include"/>
      </exec>
  </target>

  <target name="Build" description="Build Tortoise SVN, Subversion and its JavaHl library" depends="JNI_Headers, prepare">
    <property name="AdditionalTarget" value="" if="${arch == 'x86'}"/>
    <property name="AdditionalTarget" value="${arch}" if="${arch != 'x86'}"/>
    <nant buildfile="${TortoiseSvnVersion}/default.build" target="cleanall ${AdditionalTarget} binaries"/>  
    <exec program="msbuild.exe">
      <environment>
        <variable name="TortoiseSvnSourrceBase" value="./../${TortoiseSvnVersion}"/>
        <variable name="JavaDevelopmentKitBase" value="${JdkDirectory}"/>
      </environment>
      <arg value="VS2017/svnjavahl.sln"/>
      <arg value="/p:Configuration=Release"/>
      <arg value="/p:Platform=${arch}"/>
      <arg value="/t:Rebuild"/>
    </exec>
  </target>
</project>